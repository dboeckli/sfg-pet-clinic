<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>guru.springframework.sfg-pet-clinic</groupId>
        <artifactId>sfg-pet-clinic</artifactId>
        <version>0.0.3-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>sfg-pet-clinic-web</artifactId>
    <name>${project.artifactId}</name>

    <properties>
        <github.acions.build>false</github.acions.build>
        <skip.docker.build>false</skip.docker.build>
        <skip.docker.publish>true</skip.docker.publish>
        <skip.start.stop.springboot>false</skip.start.stop.springboot>

        <docker.image.tag>development</docker.image.tag> <!-- for feature branches -->
        <docker.repo>local</docker.repo>

        <logbook.version>3.12.3</logbook.version>
        <logstash-logback.version>9.0</logstash-logback.version>
        <helm.plugin.version>6.17.0</helm.plugin.version>
        <merge-yaml-plugin.version>1.4</merge-yaml-plugin.version>

        <!--suppress UnresolvedMavenProperty -->
        <buildNumber>${git.commit.id.abbrev}</buildNumber>
    </properties>

    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo1.maven.org/maven2</url>
        </repository>
        <repository>
            <!-- 
            you need a personal access token for the dboeckli organization: generate access token on github: https://github.com/settings/apps 
            add gitHub server configuration to settings.xml file with username and password (add token there)
            Configure maven settings of IntelliJ to use your personal settings.xml 
            -->
            <id>github</id>
            <url>https://maven.pkg.github.com/${project.organization.name}/${project.artifactId}</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <profiles>
        <!-- CI/CD profile for GitHub Actions -->
        <profile>
            <id>ci-cd</id>
            <activation>
                <property>
                    <name>env.GITHUB_ACTIONS</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <github.acions.build>true</github.acions.build>
                <skip.docker.publish>false</skip.docker.publish>
                <docker.repo>domboeckli</docker.repo>
            </properties>
        </profile>

        <profile>
            <id>main-branch</id>
            <activation>
                <property>
                    <name>env.GITHUB_REF</name>
                    <value>refs/heads/main</value>
                </property>
            </activation>
            <properties>
                <docker.image.tag>latest</docker.image.tag>
            </properties>
        </profile>
        <profile>
            <id>master-branch</id>
            <activation>
                <property>
                    <name>env.GITHUB_REF</name>
                    <value>refs/heads/master</value>
                </property>
            </activation>
            <properties>
                <docker.image.tag>latest</docker.image.tag>
            </properties>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>minimatch</artifactId>
                <version>${webjars-npm-minimatch.version}</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>guru.springframework.sfg-pet-clinic</groupId>
            <artifactId>sfg-pet-clinic-data</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- webjars -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${webjars-bootstrap.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.webjars.npm</groupId>
            <artifactId>font-awesome</artifactId>
            <version>${webjars-font-awesome.version}</version>
        </dependency>
        <!-- end of webjars -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-docker-compose</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.zalando</groupId>
            <artifactId>logbook-spring-boot-starter</artifactId>
            <version>${logbook.version}</version>
        </dependency>
        <dependency>
            <groupId>org.zalando</groupId>
            <artifactId>logbook-logstash</artifactId>
            <version>${logbook.version}</version>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-logback.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.webjars.npm</groupId>
                                    <artifactId>bootstrap</artifactId>
                                    <version>${webjars-bootstrap.version}</version>
                                </artifactItem>
                            </artifactItems>
                            <outputDirectory>${project.build.directory}/webjars</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.gitlab.haynes</groupId>
                <artifactId>libsass-maven-plugin</artifactId>
                <version>${libsass.version}</version>
                <configuration>
                    <inputPath>${basedir}/src/main/scss/</inputPath>
                    <outputPath>${basedir}/src/main/resources/static/resources/css/</outputPath>
                    <includePath>${project.build.directory}/webjars/META-INF/resources/webjars/bootstrap/${webjars-bootstrap.version}/scss/</includePath>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>generate-resources</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <!--
                        This execution copies helm charts and puts them into the target directory 'helm-charts'. The helm charts are used to deploy the project.
                        During the build some variables are resolved by maven filtering (e.g. the project version).
                    -->
                    <execution>
                        <id>copy-and-filter-helm-charts-to-target</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/helm-charts</outputDirectory>
                            <includeEmptyDirs>true</includeEmptyDirs>
                            <resources>
                                <resource>
                                    <directory>helm-charts</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </resource>
                            </resources>
                            <filters>
                                <filter>${project.build.directory}/helm.properties</filter>
                            </filters>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <plugin>
                <groupId>cd.connect.maven</groupId>
                <artifactId>merge-yaml-plugin</artifactId>
                <version>${merge-yaml-plugin.version}</version>
                <executions>
                    <execution>
                        <id>merge-values-yaml-files</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>mergeYaml</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.build.directory}/helm-charts/values.yaml</file>
                                <file>${project.build.directory}/helm-charts/dependencies-values.yaml</file>
                            </files>
                            <finalYaml>${project.build.directory}/helm-charts/values.yaml</finalYaml>
                            <flowStyle>BLOCK</flowStyle>
                            <varSubstitution>MUSTACHE</varSubstitution>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <indentSize>2</indentSize>
                    <lineLength>180</lineLength>
                </configuration>
            </plugin>

            <!-- we need a port to be able to start the local profile -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>reserve-tomcat-port</id>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <configuration>
                            <portNames>
                                <portName>jmx.server.port</portName>
                                <portName>tomcat.http.port</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <jvmArguments>-Dspring.application.admin.enabled=true</jvmArguments>
                    <!-- Consider to disable that in production environment  -->
                    <includeTools>true</includeTools>
                    <layers>
                        <enabled>true</enabled>
                    </layers>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>

                <executions>
                    <execution>
                        <id>add-build-infos</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                        <configuration>
                            <additionalProperties>
                                <mavenUser>${user.name}</mavenUser>
                                <javaVersion>${java.version}</javaVersion>
                                <javaVendor>${java.vendor}</javaVendor>
                                <commit-id>${buildNumber}</commit-id>
                            </additionalProperties>
                        </configuration>
                    </execution>

                    <execution>
                        <id>start-springboot-app</id>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <skip>${skip.start.stop.springboot}</skip>
                            <wait>1000</wait> <!-- 1000 milliseconds is default -->
                            <maxAttempts>120</maxAttempts> <!-- 30 attempts is default, combined with wait it results to 30 sec. We wait 60 seconds. -->
                            <arguments>
                                <argument>-Xmx1024m</argument>
                                <argument>--server.port=${tomcat.http.port}</argument>
                                <argument>--spring.cloud.kubernetes.enabled=false</argument>
                            </arguments>
                            <jmxPort>${jmx.server.port}</jmxPort>
                        </configuration>
                    </execution>

                    <execution>
                        <id>stop-springboot-app</id>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.start.stop.springboot}</skip>
                            <jmxPort>${jmx.server.port}</jmxPort>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build-docker-image</id>
                        <goals>
                            <goal>build-image-no-fork</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>
                            <skip>${skip.docker.build}</skip>
                            <image>
                                <name>local/${project.artifactId}:${project.version}</name>
                                <tags>
                                    local/${project.artifactId}:${docker.image.tag}
                                </tags>
                                <publish>false</publish>
                            </image>
                        </configuration>
                    </execution>

                    <execution>
                        <id>publish-docker-image-to-github</id>
                        <goals>
                            <goal>build-image-no-fork</goal>
                        </goals>
                        <phase>deploy</phase>
                        <configuration>
                            <skip>${skip.docker.publish}</skip>
                            <image>
                                <name>ghcr.io/${project.organization.name}/${project.artifactId}:${project.version}</name>
                                <tags>
                                    ghcr.io/${project.organization.name}/${project.artifactId}:${docker.image.tag}
                                </tags>
                                <publish>true</publish>
                            </image>
                            <docker>
                                <publishRegistry>
                                    <!--suppress UnresolvedMavenProperty: GITHUB_ACTOR is set by GitHub Actions -->
                                    <username>${env.GITHUB_ACTOR}</username>
                                    <!--suppress UnresolvedMavenProperty: GITHUB_TOKEN is set by GitHub Actions -->
                                    <password>${env.GITHUB_TOKEN}</password>
                                    <url>https://ghcr.io</url><!-- gitHub packages -->
                                </publishRegistry>
                            </docker>
                        </configuration>
                    </execution>

                    <execution>
                        <id>publish-docker-image-to-docker-hub</id>
                        <goals>
                            <goal>build-image-no-fork</goal>
                        </goals>
                        <phase>deploy</phase>
                        <configuration>
                            <skip>${skip.docker.publish}</skip>
                            <image>
                                <!--suppress UnresolvedMavenProperty: DOCKER_USER is set by GitHub Actions -->
                                <name>${env.DOCKER_USER}/${project.artifactId}:${project.version}</name>
                                <tags>
                                    <!--suppress UnresolvedMavenProperty: DOCKER_USER is set by GitHub Actions -->
                                    ${env.DOCKER_USER}/${project.artifactId}:${docker.image.tag}
                                </tags>
                                <publish>true</publish>
                            </image>
                            <docker>
                                <publishRegistry>
                                    <!--suppress UnresolvedMavenProperty: DOCKER_USER is set by GitHub Actions -->
                                    <username>${env.DOCKER_USER}</username>
                                    <!--suppress UnresolvedMavenProperty: DOCKER_TOKEN is set by GitHub Actions -->
                                    <password>${env.DOCKER_TOKEN}</password>
                                    <url>https://index.docker.io/v1/</url>
                                </publishRegistry>
                            </docker>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>io.kokuwa.maven</groupId>
                <artifactId>helm-maven-plugin</artifactId>
                <version>${helm.plugin.version}</version>
                <extensions>false</extensions>

                <configuration>
                    <chartDirectory>${project.build.directory}/helm-charts/</chartDirectory>
                    <!--suppress UnresolvedMavenProperty: helm.chart.version is set by maven antrun plugin -->
                    <chartVersion>${helm.chart.version}</chartVersion>
                    <skipLint>true</skipLint>
                    <useLocalHelmBinary>true</useLocalHelmBinary>
                    <skip>false</skip>
                    <templateOutputDir>${project.build.directory}/helm-templated</templateOutputDir>
                </configuration>

                <executions>
                    <execution>
                        <id>execute-helm-lint</id>
                        <phase>test</phase>
                        <goals>
                            <goal>lint</goal> <!-- Locally render templates -->
                        </goals>
                        <configuration>
                            <skipLint>false</skipLint>
                        </configuration>
                    </execution>
                    <execution>
                        <id>execute-helm-template</id>
                        <phase>test</phase>
                        <goals>
                            <goal>template</goal> <!-- Locally render templates -->
                        </goals>
                        <configuration>
                            <skipTemplate>false</skipTemplate>
                        </configuration>
                    </execution>
                    <execution>
                        <id>execute-helm-dry-run</id>
                        <phase>install</phase>
                        <goals>
                            <goal>dry-run</goal> <!-- simulates an install. output goes to target/helm-templated -->
                        </goals>
                    </execution>
                    <execution>
                        <id>helm-package</id>
                        <phase>install</phase>
                        <goals>
                            <goal>package</goal> <!-- creates tgz file to target/helm -->
                        </goals>
                    </execution>
                    <execution>
                        <id>helm-login</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>registry-login</goal>
                        </goals>
                        <configuration>
                            <uploadRepoStable>
                                <name>stable-repo</name>
                                <url>registry-1.docker.io</url>
                                <!--suppress UnresolvedMavenProperty: DOCKER_USER is set by GitHub Actions -->
                                <username>${env.DOCKER_USER}</username>  <!-- registry username -->
                                <!--suppress UnresolvedMavenProperty: DOCKER_TOKEN is set by GitHub Actions -->
                                <password>${env.DOCKER_TOKEN}</password> <!-- registry password or identity token -->
                            </uploadRepoStable>
                        </configuration>
                    </execution>
                    <execution>
                        <id>helm-push</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <debug>true</debug>
                            <skipPushLogin>true</skipPushLogin>
                            <uploadRepoStable>
                                <name>stable-repo</name>
                                <!--suppress UnresolvedMavenProperty: DOCKER_USER is set by GitHub Actions -->
                                <url>registry-1.docker.io/${env.DOCKER_USER}</url>
                            </uploadRepoStable>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


        </plugins>
    </build>

</project>
